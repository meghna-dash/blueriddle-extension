{"version":3,"sources":["icon.png","Results.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Results","props","state","selection","response","alert","reasons","color","width","map","reason","id","Card","backgroundColor","Component","App","className","style","textAlign","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+KAAAA,EAAOC,QAAU,IAA0B,kC,0LC0G5BC,G,wDApGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,UAAW,GACXC,SAAU,CACRC,OAAO,EACPC,QAAS,CAAC,uCAAwC,4EANrC,E,qDAsEjB,OACE,6BACG,KAAKJ,MAAME,SAASC,MACnB,yBAAK,MAAO,CAAEE,MAAO,QACnB,4BACE,+CAGJ,8BACF,yBAAK,MAAO,CAAEC,MAAO,UAClB,KAAKN,MAAME,SAASE,QAAU,KAAKJ,MAAME,SAASE,QAAQG,KAAI,SAACC,EAAQC,GAAT,OAC7D,oCACE,kBAACC,EAAA,EAAD,CAAM,UAAU,YAAY,MAAO,CAAEC,gBAAiB,YACnD,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,4BACEH,MAKV,iCAEE,oC,GA9FOI,cCoBPC,G,mLAjBX,OACE,yBAAKC,UAAU,OACb,wBAAIC,MAAO,CAAEC,UAAW,WAAxB,cAGA,yBAAKC,MAAM,eACT,yBAAKA,MAAM,qBAEb,yEAGA,kBAAC,EAAD,W,GAbUL,cCMEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.115f02f2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.26b30d31.png\";"," /*global chrome*/\nimport React, { Component } from 'react';\nimport { Card, CardBody, CardTitle, CardDeck, Progress, Row } from 'reactstrap';\nimport { CircleProgress } from 'react-gradient-progress';\n\nclass Results extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selection: \"\",\n      response: {\n        alert: true,\n        reasons: [\"This manufacturer is based in China.\", \"Verified customers have confirmed that this product was made in China.\"]\n      }\n    }\n  }\n\n  // componentDidMount() {\n  //   var text = \"\";\n  //   var _this = this;\n  //   chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {\n  //     const port = chrome.tabs.connect(tabs[0].id);\n  //     port.onMessage.addListener((response) => {\n  //       text = response.selection;\n  //       _this.query(text);\n  //     });\n  //     port.postMessage({cmd: \"select\"});\n  //   })\n  // }\n  //\n  // query(text) {\n  //   this.setState({\n  //     selection: text,\n  //   });\n  //   var body = { \n  //     \"query\": text\n  //   } ;\n  //\n  //   const url = \"http://ec2-107-22-26-250.compute-1.amazonaws.com:5000/\";\n  //\n  //   if (this.state.selection) {\n  //     fetch(url,\n  //       { \n  //         method: \"POST\",\n  //         headers: { \n  //           \"Accept\": \"application/json\",\n  //           \"Content-Type\": \"application/json\" \n  //       }, \n  //       body: JSON.stringify(body)\n  //     })\n  //     .then(res => {\n  //       return res.json()\n  //     })\n  //     .then(result => {\n  //       var body = JSON.parse(result.body);\n  //       this.setState({\n  //         response: body,\n  //       })\n  //     })\n  //     .catch(err => { \n  //       this.setState({\n  //         response: \"error: \" + err\n  //       })\n  //     }) ;\n  //   }\n  // }\n\n  render() {\n    return (\n      <div>\n        {this.state.response.alert ?\n          <div style={{ color: 'red' }}>\n            <h3>\n              <strong> WARNING </strong>\n            </h3>\n          </div>\n        : <div/>}\n        <div style={{ width: \"300px\" }}>\n          {this.state.response.reasons ? this.state.response.reasons.map((reason, id) => (\n            <>\n              <Card className=\"link-card\" style={{ backgroundColor: \"#DEEFF5\"}}>\n                 <CardBody>\n                   <CardTitle>\n                     <h3>\n                      {reason}\n                     </h3>\n                   </CardTitle>\n                 </CardBody>\n             </Card>\n             <br/>\n           </>\n          )) : <div />}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Results;\n","import React, { Component } from 'react';\nimport logo from './icon.png';\nimport Results from './Results.js';\nimport './App.css';\nimport './App.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 style={{ textAlign: 'center' }}>\n          Blueriddle\n        </h1>\n        <div class=\"topProgress\">\n          <div class=\"topProgress-bar\" />\n        </div>\n        <h2>\n          Know where your Amazon products come from\n        </h2>\n        <Results/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/*global chrome*/\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}